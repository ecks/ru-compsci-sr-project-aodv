#summary DetailedOverview of the functions used/modified for Geo-AODV implementation in OPNET
#labels geo-aodv-paper


 * aodv_rte_route_request_send – gets called whenever a control route request packet needs to be generated because either there is no available route to the destination, the route is stale, or the first rreq sent timed out. Functions that call it are _aodv_rte_app_pkt_arrival_handle_, _aodv_rte_rreq_timer_expiry_handle_, _aodv_rte_local_repair_attempt_. Our implementation adds five extra parameters to the route request control packet: *src_x*, *src_y*, *request_level*, *dst_x*, and *dst_y*. The *src_x* and *src_y* coordinates are discovered by the source node with the help of the OPNET network modeling domain. After *src_x* and *src_y* are initialized, the *aodv_geo_table* is checked for a previous entry by the destination. If there is an entry available, the coordinates for *dst_x* and *dst_y* from the *aodv_geo_table* are used, with the *request_level* set to the request level passed from the parameter to the function. If no entry was found, the *dst_x* and *dst_y* are set to *DEFAULT_X* and *DEFAULT_Y*, which correspond to -1, while the *request_level* is set to *BROADCAST_REQUEST_LEVEL*. 
 * aodv_rte_route_reply_send – gets called whenever a control route reply packet needs to be generated because either the destination corresponding to a received route request is known by an intermediate node, or the destination is the node itself. The function that calls it is _aodv_rte_rreq_pkt_arrival_handle_.Our implementation addes two extra parameters to the route reply control packet: *dst_x*, and *dst_y*. If the node is the destination itself, the *dst_x* and *dst_y* coordinates are discovered by the destination node with the help of the OPNET network modeling domain, and the rrep packet is initialized with these values. Otherwise, the node must be an intermediate node that has a valid route to the destination, in which case the *aodv_geo_table* is checked for *dst_x* and *dst_y* coordinates for the destination, which are embedded into the rrep packet. If the destination is not found in the *aodv_geo_table*, the rrep packet is initialized with *DEFAULT_X* and *DEFAULT_Y*, which correspond to -1.
 * aodv_rte_rreq_pkt_arrival_handle – gets called whenever the packet received by the process model is a control route request packet according to _aodv_rte_pkt_arrival_handle_. If there is no entry for the source in the *aodv_route_table*, the *aodv_geo_table* is updated with the newly discovered source coordinates. If there is an entry in the *aodv_route_table*, but the source sequence number is invalid, the new sequence number is greater, or new hop count is smaller, the *aodv_geo_table* is updated with the newer source coordinates. At the bottom of the function right before the rreq function is forwarded, it is known that this is an intermediate node. If the *request_level* inside the rreq packet is not set to *BROADCAST_REQUEST_LEVEL*, the intermediate node must be checked to see whether it is within the request level. The coordinates of the intermediate node, called *curr_x* and *curr_y*, are captured from the OPNET network modeling domain, which can then be passed along to _aodv_rte_rreq_calculate_angle_ along with the *src_x*, *src_y*, *dst_x*, and *dst_y*. If the intermediate node is not within the angle corresponding to the *request_level*, the packet is dropped. 
 * aodv_rte_rrep_pkt_arrival_handle - gets called whenever the packet received by the process model is a control route reply packet according to _aodv_rte_pkt_arrival_handle_. If there is no entry for the destination in the *aodv_route_table*, the *aodv_geo_table* is updated with the newly discovered destination coordinates. If there is an entry in the *aodv_route_table*, but the destination sequence number is invalid, the new sequence number is invalid, or new hop count is smaller, the *aodv_geo_table* is updated with the newer destination coordinates.  